# Generated by Django 3.1.5 on 2021-01-08 18:18

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DailyIntakesReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('daily_norm_potassium_mg', models.PositiveIntegerField(blank=True, null=True)),
                ('daily_norm_proteins_mg', models.PositiveIntegerField(blank=True, null=True)),
                ('daily_norm_sodium_mg', models.PositiveIntegerField(blank=True, null=True)),
                ('daily_norm_phosphorus_mg', models.PositiveIntegerField(blank=True, null=True)),
                ('daily_norm_energy_kcal', models.PositiveIntegerField(blank=True, null=True)),
                ('daily_norm_liquids_ml', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_lt', models.CharField(max_length=128, unique=True)),
                ('name_en', models.CharField(max_length=128, null=True)),
                ('kind', models.CharField(choices=[('Unknown', 'Unknown'), ('Food', 'Food'), ('Drink', 'Drink')], default='Unknown', max_length=16)),
                ('potassium_mg', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('proteins_mg', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('sodium_mg', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('phosphorus_mg', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('energy_kcal', models.PositiveSmallIntegerField()),
                ('liquids_ml', models.PositiveSmallIntegerField()),
                ('raw_id', models.CharField(blank=True, editable=False, max_length=64, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('-pk',),
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=8)),
                ('birthday', models.DateField()),
                ('height_cm', models.PositiveSmallIntegerField()),
                ('weight_kg', models.DecimalField(decimal_places=1, max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('10'))])),
                ('chronic_kidney_disease_years', models.PositiveSmallIntegerField()),
                ('chronic_kidney_disease_stage', models.CharField(choices=[('Unknown', 'Unknown'), ('Stage1', 'Stage1'), ('Stage2', 'Stage2'), ('Stage3', 'Stage3'), ('Stage4', 'Stage4'), ('Stage5', 'Stage5')], max_length=16)),
                ('dialysis_type', models.CharField(choices=[('Unknown', 'Unknown'), ('PeriotonicDialysis', 'Periotonicdialysis'), ('Hemodialysis', 'Hemodialysis'), ('PostTransplant', 'Posttransplant'), ('NotPerformed', 'Notperformed')], max_length=32)),
                ('diabetes_years', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('diabetes_type', models.CharField(choices=[('Unknown', 'Unknown'), ('Type1', 'Type1'), ('Type2', 'Type2'), ('No', 'No')], default='Unknown', max_length=16)),
                ('diabetes_complications', models.CharField(choices=[('Unknown', 'Unknown'), ('No', 'No'), ('Yes', 'Yes')], default='Unknown', max_length=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Intake',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consumed_at', models.DateTimeField()),
                ('amount_g', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('daily_report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intakes', to='core.dailyintakesreport')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intakes', to='core.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DailyHealthStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('systolic_blood_pressure', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('diastolic_blood_pressure', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('10'))])),
                ('glucose', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('urine_ml', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('swelling_difficulty', models.CharField(choices=[('Unknown', 'Unknown'), ('0+', 'Difficulty0'), ('1+', 'Difficulty1'), ('2+', 'Difficulty2'), ('3+', 'Difficulty3'), ('4+', 'Difficulty4')], default='Unknown', max_length=16)),
                ('well_feeling', models.CharField(choices=[('Unknown', 'Unknown'), ('Perfect', 'Perfect'), ('Good', 'Good'), ('Average', 'Average'), ('Bad', 'Bad'), ('VeryBad', 'Verybad')], default='Unknown', max_length=16)),
                ('appetite', models.CharField(choices=[('Unknown', 'Unknown'), ('Perfect', 'Perfect'), ('Good', 'Good'), ('Average', 'Average'), ('Bad', 'Bad'), ('VeryBad', 'Verybad')], default='Unknown', max_length=16)),
                ('shortness_of_breath', models.CharField(choices=[('Unknown', 'Unknown'), ('No', 'No'), ('Light', 'Light'), ('Average', 'Average'), ('Severe', 'Severe'), ('Backbreaking', 'Backbreaking')], default='Unknown', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='intake',
            index=models.Index(fields=['user', '-consumed_at'], name='core_intake_user_id_1c31fd_idx'),
        ),
        migrations.AddConstraint(
            model_name='dailyintakesreport',
            constraint=models.UniqueConstraint(fields=('user', 'date'), name='unique_user_date_daily_intakes_report'),
        ),
        migrations.AddConstraint(
            model_name='dailyhealthstatus',
            constraint=models.UniqueConstraint(fields=('user', 'date'), name='unique_user_date_daily_health_status'),
        ),
    ]
